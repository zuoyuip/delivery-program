<template xmlns:wx="urn:oasis:names:tc:entity:xmlns:xml:catalog">
  <wxc-loadmore is-end="{{ false }}" wx:if="{{ isLoading }}"></wxc-loadmore>
  <wxc-toast
      icon="{{ $toast.icon }}"
      icon-color="{{ $toast.color }}"
      is-show="{{$toast.show}}"
      text="{{ $toast.text }}"
  ></wxc-toast>
  <wxc-dialog bindcancel="noLoginOnCancel" bindconfirm="noLoginOnConfirm" cancel-text="取消"
              class="noLogin-dialog"
              confirm-text="现在登录" content="您还未登录" title="提示"></wxc-dialog>
  <wxc-dialog bindcancel="acceptOnCancel" bindconfirm="acceptOnConfirm" cancel-text="取消"
              class="accept-dialog"
              confirm-text="接受" content="确定接受该订单" title="提示"></wxc-dialog>

  <view class="table">
    <view class="tr head">
      <text class="th deliveryAddress">取件地址</text>
      <text class="th deliveryGoalFloor">送达地点</text>
      <text class="th deliveryUserSex">限制</text>
      <text class="th deliveryReward">赏金</text>
    </view>
    <view class="space"></view>
    <view wx:if="{{ expressList.length > 0 }}">
      <view bindtap="chooseExpress" class="tr" id="{{ index }}"
            wx:for="{{ expressList }}" wx:for-index="index" wx:for-item="express"
            wx:key="deliveryId">
        <text class="td deliveryAddress">{{ express.deliveryAddress }}</text>
        <text class="td deliveryGoalFloor">{{ express.deliveryGoalFloor }}</text>
        <text class="td deliveryUserSex">{{ express.deliveryUserSex }}</text>
        <text class="td deliveryReward">{{ express.deliveryReward }}</text>
      </view>
      <wxc-loadmore is-end="{{ true }}"></wxc-loadmore>
    </view>
    <view wx:else>
      <wxc-abnor
          bind:abnortap="onRetry"
          type="{{ requestType }}"></wxc-abnor>
    </view>
  </view>

  <view bindtap="toExpressEnter" class="add_button">
    <text decode="true">&nbsp;&nbsp;</text>
    <wxc-icon color="#949494" size="30" type="add"></wxc-icon>
    <text decode="true">&nbsp;发布&nbsp;</text>
  </view>
  <wxc-mask content-align="bl" status="{{ maskStatus }}">
    <view class="popup__content">
      <view class="input-wrap">
        <wxc-panel border="{{ false }}" class="panel">
          <wxc-cc>
            <text class="title-style">快递名称</text>
            <text class="picker-message">{{ expressList[expressIndex].deliveryName }}</text>
          </wxc-cc>
        </wxc-panel>
        <wxc-panel border="{{ false }}" class="panel">
          <wxc-cc>
            <text class="title-style">性别限制</text>
            <text class="picker-message">{{ expressList[expressIndex].deliveryUserSex }}</text>
          </wxc-cc>
        </wxc-panel>
        <wxc-panel border="{{ false }}" class="panel">
          <wxc-cc>
            <text class="title-style">快递地址</text>
            <text class="picker-message">{{ expressList[expressIndex].deliveryAddress }}</text>
          </wxc-cc>
        </wxc-panel>
        <wxc-panel border="{{ false }}" class="panel">
          <wxc-cc>
            <text class="title-style">送达地址</text>
            <text class="picker-message">{{ expressList[expressIndex].deliveryGoalAddress }}</text>
          </wxc-cc>
        </wxc-panel>
        <wxc-panel border="{{ false }}" class="panel">
          <wxc-cc>
            <text class="title-style">快递体积</text>
            <text class="picker-message">{{ expressList[expressIndex].deliveryWeight }}</text>
          </wxc-cc>
        </wxc-panel>
        <wxc-panel border="{{ false }}" class="panel">
          <wxc-cc>
            <text class="title-style">报酬金额</text>
            <text class="picker-message">{{ expressList[expressIndex].deliveryReward }}</text>
          </wxc-cc>
        </wxc-panel>
        <wxc-panel border="{{ false }}" class="panel">
          <wxc-cc>
            <text class="title-style">发布时间</text>
            <text class="picker-message">{{ expressList[expressIndex].deliveryDate }}</text>
          </wxc-cc>
        </wxc-panel>
        <wxc-panel border="{{ false }}" class="panel">
          <wxc-cc>
            <text class="title-style">备注信息</text>
            <text class="picker-message">{{ expressList[expressIndex].deliveryRemark }}</text>
          </wxc-cc>
        </wxc-panel>
        <view class="space"></view>
        <button bindtap="acceptExpress" class="sure_button"
                id="{{ expressList[expressIndex].deliveryId }}" type="{{ 'primary' }}">接受
        </button>
      </view>
    </view>
  </wxc-mask>
</template>

<script>
  const appInstance = getApp();
  export default {
    data: {
      expressList: [],
      expressIndex: 0,
      requestType: '',
      isLoading: false,
      maskStatus: 'hide',
      $toast: {
        text: '',
        show: false,
        color: '',
        icon: ''
      },
    },
    showToast(text, color, icon) {
      this.setData({
        $toast: {
          text: text,
          color: color,
          icon: icon,
          show: true
        }
      });
      setTimeout(() => {
        this.setData({
          $toast: {
            show: false
          }
        })
      }, 1500)
    },
    chooseExpress(e) {
      this.setData({
        expressIndex: e.currentTarget.id
      });
      this.showMask()
    },
    showMask() {
      this.setData({
        maskStatus: 'show'
      })
    },
    selectExpress() {
      const that = this;
      that.setData({
        isLoading: true
      });
      wx.request({
        url: 'http://39.107.244.193:8080/delivery/delivery',
        method: 'GET',
        success: res => {
          if (res.statusCode === 200) {
            const expressList = res.data;
            that.setData({
              expressList: expressList.reverse(),
              requestType: 'ORDER'
            });
            return
          }
          that.setData({
            requestType: 'SHOP'
          })
        },
        fail: error => {
          that.setData({
            requestType: 'REQUEST_ERROR'
          })
        },
        complete: () => {
          that.setData({
            isLoading: false
          });
        }
      });
    },
    toExpressEnter() {
      const user = appInstance.globalData.user;
      const userString = JSON.stringify(user);
      if (userString === '{}') {
        this.showDialog('.noLogin-dialog');
        return;
      }
      wx.navigateTo({
        url: '../express/expressEnter'
      })
    },
    verifyUser() {
      wx.getStorage({
        key: 'authenticatedCode',
        success: res => {
          appInstance.globalData.authenticatedCode = res.data;
          wx.request({
            url: 'http://39.107.244.193:8080/delivery/user/authentication',
            method: 'GET',
            header: {
              'Cookie': appInstance.globalData.authenticatedCode
            },
            success: res => {
              appInstance.globalData.user = res.data.principal;
            },
            fail: error => {
            },
            complete: () => {
            }
          });
        }
      });
    },
    acceptExpress(e) {
      console.log(e.currentTarget.id);
      const user = appInstance.globalData.user;
      const userString = JSON.stringify(user);
      if (userString === '{}') {
        this.showDialog('.noLogin-dialog');
        return;
      }
      this.showDialog('.accept-dialog');
    },
    showDialog(dialog) {
      let dialogComponent = this.selectComponent(dialog);
      dialogComponent && dialogComponent.show();
    },
    hideDialog(dialog) {
      let dialogComponent = this.selectComponent(dialog);
      dialogComponent && dialogComponent.hide();
    },
    noLoginOnConfirm() {
      wx.navigateTo({
        url: '../user/login'
      });
      this.hideDialog('.noLogin-dialog')
    },
    noLoginOnCancel() {
      this.hideDialog('.noLogin-dialog')
    },
    acceptOnConfirm() {
      console.log('点击了确认按钮');
      this.hideDialog('.accept-dialog')
    },
    acceptOnCancel() {
      console.log('点击了取消按钮');
      this.hideDialog('.accept-dialog')
    },
    onLoad: function (options) {
      // 页面创建时执行
      this.selectExpress()
    },
    onShow: function () {
      // 页面出现在前台时执行
    },
    onReady: function () {
      this.verifyUser();
      // 页面首次渲染完毕时执行
    },
    onHide: function () {
      // 页面从前台变为后台时执行
    },
    onUnload: function () {
      // 页面销毁时执行
    },
    onPullDownRefresh: function () {
      // 触发下拉刷新时执行
      this.selectExpress()
    },
    onReachBottom: function () {
      // 页面触底时执行
    },
    onShareAppMessage: function () {
      // 页面被用户分享时执行
    },
    onPageScroll: function () {
      // 页面滚动时执行
    },
    onResize: function () {
      // 页面尺寸变化时执行
    },
    onTabItemTap(item) {
      // tab 点击时执行

    },
    config: {
      // 导航栏标题文字内容
      navigationBarTitleText: '主页',
      // 是否开启当前页面下拉刷新。
      enablePullDownRefresh: true,
      // 设置为 true 则页面整体不能上下滚动
      disableScroll: false,
      // 禁止页面右滑手势返回
      disableSwipeBack: false,
      usingComponents: {
        'wxc-panel': '@minui/wxc-panel',
        'wxc-cc': '@minui/wxc-cc',
        'wxc-loadmore': '@minui/wxc-loadmore',
        'wxc-abnor': '@minui/wxc-abnor',
        'wxc-icon': '@minui/wxc-icon',
        'wxc-mask': '@minui/wxc-mask',
        'wxc-dialog': '@minui/wxc-dialog',
        'wxc-toast': '@minui/wxc-toast'
      }
    }
  }
</script>

<style lang="less">
  .table {
    border: ~'1rpx' solid #dadada;
    border-right: 0;
    border-bottom: 0;
    width: 100%;
    margin-bottom: ~'6rpx'
  }

  .head {
    position: fixed;
    top: 0;
  }

  .tr {
    width: 100%;
    display: flex;
    justify-content: space-between;
  }

  .td {
    height: ~'66rpx';
    line-height: ~'66rpx';
    border-bottom: ~'1rpx' solid #dadada;
    border-right: ~'1rpx' solid #dadada;
    text-align: center;
    width: 100%;
    font-size: ~'30rpx';
    color: #888888;
  }


  .th {
    font-weight: 500;
    background-color: #ffffff;
    font-size: ~'36rpx';
    color: #666666;
    box-shadow: 0px 7px 8px -8px #333333;
    height: ~'66rpx';
    line-height: ~'66rpx';
    border-bottom: ~'1rpx' solid #dadada;
    /*border-right: ~'1rpx' solid #dadada;*/
    text-align: center;
    width: 100%;
  }

  .deliveryAddress {
    width: ~'1200rpx';
  }

  .deliveryGoalFloor {
    width: ~'1000rpx';
  }

  .space {
    height: ~'66rpx';
  }


  .add_button {
    position: fixed;
    width: ~'150rpx';
    height: ~'60rpx';
    line-height: ~'60rpx';
    bottom: ~'64rpx';
    right: ~'299rpx';
    font-size: ~'35rpx';
    /*vertical-align: center;*/
    color: #949494;
    background-color: #FFFFFF;
    border-radius: ~'30rpx';
    border-style: outset;
    /*box-shadow:0px 3px 8px #949494;*/
  }

  .popup__content {
    width: ~'800rpx';
    height: ~'900rpx';
    line-height: ~'500rpx';
    background: #ffffff;
    text-align: center;
  }

  .input-wrap {
    position: relative;
    margin: ~'20rpx' ~'10rpx' 0 ~'10rpx';
  }

  .panel {
    min-width: ~'163rpx';
    line-height: ~'44rpx';
    height: ~'44rpx';
    display: flex;
    align-items: center;
    padding: ~'20rpx' ~'30rpx' ~'26rpx' ~'30rpx';
    font-size: ~'28rpx';
    color: #333;
    border: 0 solid #f0f0f0;
    border-bottom-width: ~'1rpx';
  }

  .title-style {
    flex: 1;
    height: ~'44rpx';
    min-height: ~'44rpx';
    line-height: ~'44rpx';
  }

  .picker-message {
    margin-left: ~'44rpx';
    color: #959595;
  }

  .sure_button {
    border-radius: ~'26rpx';
    width: ~'500rpx';
    height: ~'60rpx';
    font-size: ~'30rpx';
    line-height: ~'60rpx';
    margin-left: 15%;
  }

  .mask-demo_content {
    width: ~'350rpx';
    padding: ~'20rpx';
    background: #FFF;
    color: #000;
  }
</style>
