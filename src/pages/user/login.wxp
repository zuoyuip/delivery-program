<template>
  <view class="space"></view>
  <wxc-toast
          icon="{{ $toast.icon }}"
          icon-color="{{ $toast.color }}"
          is-show="{{$toast.show}}"
          text="{{ $toast.text }}"
  ></wxc-toast>
  <view class="space1"></view>
  <view class="input-wrap">
    <wxc-input bind:input="userNameInput" mode="normal" placeholder="输入您的手机号码" right="{{true}}"
               title="帐号" type="number"
               value="{{ userName }}"></wxc-input>
  </view>

  <view class="input-wrap">
    <wxc-input bind:input="passWordInput" mode="normal" password="true" placeholder="输入您的密码"
               right="{{true}}" title="密码" type="text" value="{{ passWord }}"></wxc-input>
  </view>
  <view class="forget-space"></view>
  <wxc-cc>
    <text bindtap="registerUser" class="register">注册帐号</text>
    <text bindtap="forgetUser" class="forget">忘记密码</text>
  </wxc-cc>
  <view class="forget-space"></view>
  <view class="forget-space"></view>
  <wxc-cc>
    <wxc-button bind:click="login" btnStyle="width: 500rpx;border-radius: 26rpx;color: #ffffff;background-color: #1aad19;"
                size="normal" type="selection" value="登录"></wxc-button>
  </wxc-cc>
</template>

<script>
  const appInstance = getApp();
  export default {
    data: {
      userName: '',
      passWord: '',
      $toast: {
        text: '',
        show: false,
        color: '',
        icon: ''
      },
    },
    showToast(text, color, icon) {
      this.setData({
        $toast: {
          text: text,
          color: color,
          icon: icon,
          show: true
        }
      });
      setTimeout(() => {
        this.setData({
          $toast: {
            show: false
          },
          contentCount: 0,
          content: ''
        })
      }, 1000)
    },
    forgetUser() {
      wx.navigateTo({
        url: '../user/forgetUser'
      })
    },
    registerUser() {
      wx.navigateTo({
        url: '../user/register'
      })
    },
    userNameInput: function userNameInput(e) {
      this.setData({
        userName: e.detail.value
      });
    },
    passWordInput: function passWordInput(e) {
      this.setData({
        passWord: e.detail.value
      });
    },
    login() {
      wx.request({
        url: 'https://www.tkparcel.com/delivery/login',
        method: 'POST',
        data: {
          userName: this.data.userName,
          passWord: this.data.passWord
        },
        header: {
          'content-type': 'application/x-www-form-urlencoded'
        },
        success: res => {
          if (res.data.status === 200) {
            const rememberMe = res.cookies[0];
            const sessionId = res.cookies[1];
            const rememberMeIndex = rememberMe.indexOf(';');
            const sessionIdIndex = sessionId.indexOf(';');
            const rememberMeCookie = rememberMe.slice(0, rememberMeIndex);
            const sessionIdCookie = sessionId.slice(0, sessionIdIndex);
            const authenticatedCode = rememberMeCookie + '; ' + sessionIdCookie;
            wx.setStorage({
              key: 'authenticatedCode',
              data: authenticatedCode,
              success: res => {
                appInstance.globalData.authenticatedCode = authenticatedCode;
                this.verifyUser(authenticatedCode);
                this.showToast('登录成功，正在跳转...', '#5ac777', 'yes');
                setTimeout(() => {
                  wx.reLaunch({
                    url: '../home/me'
                  });
                }, 1000);
              },
              fail: error => {
                this.showToast('小程序出错，请联系管理员', '#c70009', 'no');
              }
            });
            return;
          }
          this.showToast(res.data.message, '#c70009', 'no');
        },
        fail: error => {
          this.showToast('请求失败，可能是网络原因', '#a2675a', 'warning');
        },
        complete: () => {
        }
      });
    },
    verifyUser(authenticatedCode) {
      wx.request({
        url: 'https://www.tkparcel.com/delivery/user/authentication',
        method: 'GET',
        header: {
          'Cookie': authenticatedCode
        },
        success: function success(res) {
          appInstance.globalData.user = res.data.principal;
        },
        fail: error => {
        },
        complete: () => {
        }
      });
    },
    selectUserInfo() {
      const user = appInstance.globalData.user;
      const userString = JSON.stringify(user);
      if (userString === '{}') {
        return;
      }
      if (user.userInfoId === null || user.userInfoId.trim().length === 0) {
        return;
      }
      wx.request({
        url: 'https://www.tkparcel.com/delivery/user/userInfo/' + user.userInfoId,
        method: 'GET',
        header: {
          'Cookie': appInstance.globalData.authenticatedCode
        },
        success: res => {
          appInstance.globalData.userInfo = res.data
        },
        fail: error => {
          setTimeout(() => {
            this.showToast('账户详情请求失败，可能是网络原因', '#c70009', 'no');
          }, 1000);
        },
        complete: () => {
        }
      });
    },
    onLoad: function (options) {
      // 页面创建时执行

    },
    onShow: function () {
      // 页面出现在前台时执行
    },
    onReady: function () {
      // 页面首次渲染完毕时执行
    },
    onHide: function () {
      // 页面从前台变为后台时执行
    },
    onUnload: function () {
      this.selectUserInfo();
      // 页面销毁时执行
    },
    onPullDownRefresh: function () {
      // 触发下拉刷新时执行
    },
    onReachBottom: function () {
      // 页面触底时执行
    },
    onShareAppMessage: function () {
      // 页面被用户分享时执行
    },
    onPageScroll: function () {
      // 页面滚动时执行
    },
    onResize: function () {
      // 页面尺寸变化时执行
    },
    onTabItemTap(item) {
      // tab 点击时执行

    },
    config: {
      // 导航栏标题文字内容
      navigationBarTitleText: '登录',
      // 是否开启当前页面下拉刷新。
      enablePullDownRefresh: false,
      // 设置为 true 则页面整体不能上下滚动。
      disableScroll: false,
      // 禁止页面右滑手势返回
      disableSwipeBack: false,
      usingComponents: {
        'wxc-input': '@minui/wxc-input',
        'wxc-cc': '@minui/wxc-cc',
        'wxc-button': '@minui/wxc-button',
        'wxc-toast': '@minui/wxc-toast',
        'wxc-avatar': '@minui/wxc-avatar'
      }
    }
  }
</script>

<style lang="less">
  .space {
    height: ~'150rpx';
  }
  .space1 {
    height: ~'100rpx';
  }

  .input-wrap {
    position: relative;
    margin: ~'20rpx' ~'10rpx' 0 ~'10rpx';
  }

  .forget-space {
    height: ~'30rpx';
  }

  .forget {
    color: #888888;
    font-size: smaller;
    text-decoration: #888888 underline;
    margin-left: ~'440rpx';
  }

  .register {
    color: #888888;
    font-size: smaller;
    text-decoration: #888888 underline;
  }
  .avatar {
    display: block;
    width: ~'500rpx';
    height: ~'100rpx';
    background: #31b0d5;
    color: #FFF;
    margin-left: 17%;
  }

</style>